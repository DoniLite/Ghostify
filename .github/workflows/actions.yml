name: Build Deno CD/CI
run-name: ${{ github.actor }}'s GitHub Actions
env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DENO_DIR: /node_modules

on:
  push:
    branches:
      - main
      - 'octocat/**'
      - 'releases/**'
      - develop
    tags:
      - v2
      - v1.*
  pull_request:
    branches:
      - main
      - 'octocat/**'
  schedule:
    - cron: '30 5 * * 1,3'
    - cron: '30 5 * * 2,4'

jobs:
  check-deno-version:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deno-version: [1.41.0, 1.40.0]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno-version }}
          
      - name: Cache Deno dependencies
    	uses: actions/cache@v4
    	with:
      	  path: ${{ env.DENO_DIR }}
      	  key: ${{ hashFiles('deno.lock') }}
        continue-on-error: true  # Continue even if cache is not found
        
      - name: Install dependencies
      	run: deno install --reload --lock=deno.lock --allow-scripts --frozen=false --entrypoint .src/server.ts
        
      - name: Lint Code
        run: deno lint
        
      - name: Check Types
        run: deno check .src/server.ts
        
      - name: Run Tests
        run: deno test
        
      - name: Build Project
        run: deno task build  # Assurez-vous d'avoir défini cette tâche dans deno.json
        
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/
