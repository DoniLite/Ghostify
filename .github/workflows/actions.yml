name: Build Deno CD/CI
run-name: ${{ github.actor }}'s GitHub Actions
env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DENO_DIR: ~/.cache/deno

on:
  push:
    branches:
      - main
      - 'octocat/**'
      - 'releases/**'
      - develop
    tags:
      - v2
      - v1.*
  pull_request:
    branches:
      - main
      - 'octocat/**'
  schedule:
    - cron: '30 5 * * 1,3'
    - cron: '30 5 * * 2,4'

jobs:
  check-deno-version:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deno-version: [1.41.0, 1.40.0]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Cache Dependencies
        run: deno install --reload --lock=deno.lock --frozen=false --allow-scripts

      - name: Generate types for prisma
        run: deno task prisma:generate

      - name: Lint Code
        run: deno lint --fix --ignore="**/*.js"

      - name: Check Types
        run: deno check src/server.ts

      - name: Run Tests
        run: deno task test

      - name: Create dist directory
        run: mkdir -p dist # Crée le répertoire dist s'il n'existe pas

      - name: Build Project
        run: deno task build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/
