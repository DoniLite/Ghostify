# .github/workflows/deno-cd-ci.yml
name: Deno CD/CI Workflow
run-name: ${{ github.actor }}'s Deno CI/CD

env:
  DENO_DIR: ~/.cache/deno # Still useful for consistent path reference

on:
  push:
    branches:
      - main
      - "octocat/**" # Consider if this is still needed
      - "releases/**"
      - develop
    tags:
      - v2
      - "v1.*"
  pull_request:
    branches:
      - main
      - "octocat/**" # Consider if this is still needed
      - develop
  schedule:
    # Runs at 05:30 AM on Monday, Tuesday, Wednesday, Thursday
    - cron: "30 5 * * 1-4"

jobs:
  deno-backend-ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Use specific patch versions or 'x' for minor/major releases
        # to ensure stability while allowing for updates.
        deno-version: ["1.41.0", "1.40.0", "2.x"] # Changed 2.3.1 to 2.x for latest Deno 2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Deno and Restore Cache
        # The denoland/setup-deno action handles caching for DENO_DIR automatically
        # when deno-version is specified and a deno.lock is present.
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno-version }}

      - name: Cache Deno Dependencies (Explicitly if needed, but setup-deno often handles it)
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-
            ${{ runner.os }}-

      - name: Download Deno Modules
        # Using deno cache to ensure all modules are downloaded and cached
        run: deno install --reload --lock=deno.lock --frozen=false --allow-scripts

      - name: Generate Types for Prisma
        run: deno task prisma:generate

      - name: Lint Code
        # Consider making --fix a separate step or running it locally before commit
        run: deno lint --ignore="**/*.js"

      - name: Run Tests
        run: deno task test-ci

      - name: Build Project
        run: deno task build

      - name: Create dist directory (if not created by build)
        # This step might be redundant if deno task build creates 'dist'
        run: mkdir -p dist

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deno-build-artifacts
          path: dist/
          retention-days: 7
