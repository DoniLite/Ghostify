name: Ghostify_Services

services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DB_NAME: ghostify_db
      DB_HOST: db
      DB_USER: ghostify
      DB_PASSWORD: doni_lite_is_the_server_owner_password
      NODE_ENV: production
      DENO_ENV: production
      DATABASE_URL: postgresql://ghostify:doni_lite_is_the_server_owner_password@db:5432/ghostify_db?schema=own&connection_limit=5
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./static:/static
      - ./cmd:/cmd
      - ./security:/security
    networks:
      - ghostify_network

  db:
    image: postgres:latest
    container_name: ghostify_db
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ghostify
      POSTGRES_PASSWORD: doni_lite_is_the_server_owner_password
      POSTGRES_DB: ghostify_db
    ports:
      - '5433:5432'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'ghostify', '-d', 'ghostify']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ghostify_network

  nginx:
    image: nginx:alpine
    ports:
      - '80:80' # HTTP
      - '443:443' # HTTPS
    depends_on:
      - server
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      # - ./static:/usr/share/nginx/static:ro   # Pour les certificats SSL si n√©cessaire
    networks:
      - ghostify_network
  redis:
    image: redis:latest
    container_name: redis-container
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data

volumes:
  db-data:
  static:
  cmd:
  security:
  redis-data:

networks:
  ghostify_network:
    driver: bridge
