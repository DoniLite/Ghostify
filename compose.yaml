name: Ghostify_Services

services:
  server:
    environment:
      NODE_ENV: production
      DENO_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=own&connection_limit=5
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./static:/static
      - ./cmd:/cmd
      - ./security:/security
    networks:
      - ghostify_network

  db:
    image: postgres
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ghostify", "-d", "ghostify"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ghostify_network

  nginx:
    image: nginx:alpine
    ports:
      - '80:80' # HTTP
      - '443:443' # HTTPS
    depends_on:
      - server
      - api
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      # - ./static:/usr/share/nginx/static:ro   # Pour les certificats SSL si n√©cessaire
    networks:
      - ghostify_network

volumes:
  db-data:
  static:
  cmd:
  security:

networks:
  ghostify_network:
    driver: bridge
