generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id      Int     @id @default(autoincrement())
  email   String  @unique
  name    String?
  message String?
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  fullname       String?
  password       String?
  token          String?
  service        String?
  registration   DateTime         @default(now())
  permission     Permission
  apiAccess      Boolean          @default(false)
  apiCredits     Int              @default(300)
  cvCredits      Int              @default(300)
  posterCredits  Int              @default(300)
  provider       Provider?        @default(Ghostify)
  username       String?          @unique
  avatar         String?
  providerId     String?          @unique
  registered     Boolean          @default(false)
  plan           UserPlan         @default(Free)
  bio            String?
  link           String?
  Key            Key[]
  notifications  Notifications[]
  CV             Resume[]
  Document       Document[]
  FundingDetails FundingDetails[]
  Wallet         Wallet?
}

model FundingDetails {
  id       String          @id @default(ulid())
  user     User            @relation(fields: [userId], references: [id])
  userId   String
  priority FundingPriority @default(P1)
  type     FundingProvider
  details  Json?
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
  balance   Float    @default(0.0)
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FundingProvider {
  Stripe
  PayPal
  BankTransfer
  Crypto
  Wallet
  Card
}

model Key {
  id     String  @id @default(uuid())
  key    String?
  iv     String?
  type   KeyType
  uid    String? @unique
  token  String?
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model Admin {
  id         String    @id @default(uuid())
  role       String
  login      String    @unique
  password   String
  token      String
  activities String?
  connection DateTime?
}

model Notifications {
  id        String           @id @default(uuid())
  title     String?
  type      NotificationType
  content   String
  createdAt DateTime         @default(now())
  seen      Boolean          @default(false)
  userId    String?
  User      User?            @relation(fields: [userId], references: [id])
}

model Document {
  id           String   @id @default(uuid())
  title        String?
  type         String
  downloadLink String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String?
  User         User?    @relation(fields: [userId], references: [id])
  postId       Int?
}

model Resume {
  id         String   @id @default(uuid())
  url        String?
  type       String?
  mode       String?
  pdf        String?
  screenshot String?
  metaData   String
  img        String?
  default    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

enum UserPlan {
  Starter
  Pro
  Free
}

enum Service {
  Poster
  CVMaker
  APIs
}

enum Permission {
  User
  Admin
  Root
}

enum Provider {
  Google
  Facebook
  Twitter
  Instagram
  LinkedIn
  Ghostify
}

enum KeyType {
  Password
  SecretKey
  SessionKey
  ApiKey
  AccessToken
  RefreshToken
  TwoFactorCode
  GoogleAuthCode
  AppleAuthCode
  GitHubAuthCode
  DiscordAuthCode
  TwitterAuthCode
  InstagramAuthCode
  LinkedInAuthCode
  FacebookAuthCode
  RedditAuthCode
  PlatformKey
}

enum NotificationType {
  Alert
  Reply
  like
  Post
  Info
  Message
}

enum FundingPriority {
  P1
  P2
  P3
  P4
}
