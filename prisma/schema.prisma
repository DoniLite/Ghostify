// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Permission {
  User
  Admin
  Root
}

enum Visibility {
  Public
  Private
}

model Contact {
  id      Int     @id @default(autoincrement())
  email   String  @unique
  name    String?
  message String?
}

model Category {
  id    Int    @id @default(autoincrement())
  title String @unique
  keys  String
  post  Post[]
}

model PostSection {
  id        Int      @id @default(autoincrement())
  parent    Post     @relation(fields: [postId], references: [id])
  postId    Int
  title     String
  updatedAt DateTime @updatedAt
  content   String?
  indedx    Int
  header    Boolean  @default(false)
  meta      String? //like list or injeted metadata
}

enum Reactions {
  Love
  Laugh
  Hurted
}

model Comment {
  id        Int         @id @default(autoincrement())
  post      Post?       @relation(fields: [postId], references: [id])
  file      String?
  reactions Reactions[]
  postId    Int?
  content   String?
  comments  Comment[]   @relation(name: "CommentToComment")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  comment   Comment?    @relation(name: "CommentToComment", fields: [commentId], references: [id])
  commentId Int?
  signaled  BigInt      @default(0)
  meta      String?
  isAnActu  Boolean
  promoted  Boolean     @default(false)
  ip        String?
  safe      Boolean     @default(false)
  indexed   Boolean     @default(false)
  visitors  BigInt      @default(0)
  url       String?
  Indexer   Indexer?    @relation(fields: [indexerId], references: [id])
  indexerId Int?
}

model postFile {
  id        Int    @id @default(autoincrement())
  filePath  String
  sectionId Int
  filePost  Post   @relation(fields: [postId], references: [id])
  index     Int
  postId    Int
}

model Post {
  id            Int           @id @default(autoincrement())
  title         String
  description   String
  safe          Boolean
  url           String?
  createdAt     DateTime      @default(now())
  inMemory      Boolean       @default(true)
  toUpdate      Boolean       @default(false)
  updatedAt     DateTime      @updatedAt
  content       String?
  published     Boolean       @default(false)
  section       PostSection[]
  slug          String?
  category      Category?     @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  visibility    Visibility
  visites       BigInt        @default(0)
  user          User?         @relation(fields: [userId], references: [id]) // If the post is from `Api` then require the user. the user is a sjon string data
  fromApi       Boolean       @default(false)
  parsedContent String?
  Comment       Comment[]
  files         postFile[]
  indexer       Indexer?      @relation(fields: [indexerId], references: [id])
  indexerId     Int?
  indexed       Boolean       @default(false)
  userId        Int?

  @@index([published, createdAt])
  @@map("posts")
}

model Indexer {
  id      Int        @id @default(autoincrement())
  keys    String
  type    String     @unique
  post    Post[]
  url     Url[]
  game    GameData[]
  Project Project[]
  Assets  Assets[]
  Comment Comment[]
}

model GamerStat {
  id         Int       @id @default(autoincrement())
  ip         String
  url        String?   @unique
  gamingDay  DateTime
  game       GameData? @relation(fields: [gameId], references: [id])
  gameId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  gamerStats String
  userId     Int?
}

model GameData {
  id          Int         @id @default(autoincrement())
  gamers      GamerStat[]
  gameUrl     String
  title       String
  icon        String
  description String
  indexed     Boolean     @default(true)
  logo        String
  data        String? //json
  Indexer     Indexer     @relation(fields: [indexerId], references: [id])
  indexerId   Int
}

model Project {
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  github            String
  gitLab            String
  bitbucket         String
  indexed           Boolean  @default(false)
  license           String
  link              String
  participation     String
  participationType String
  indexer           Indexer? @relation(fields: [indexerId], references: [id])
  indexerId         Int?
}

model GeneratorData {
  name  String  @id
  email String?
  url   String?
}

model Url {
  id        Int      @id @default(autoincrement())
  url       String   @unique
  visit     BigInt   @default(0)
  name      String
  updatedAt DateTime @updatedAt
  indexed   Boolean  @default(false)
  health    Boolean  @default(false)
  Indexer   Indexer? @relation(fields: [indexerId], references: [id])
  indexerId Int?
}

model User {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  password     String
  token        String
  service      String
  registration DateTime?
  permission   Permission
  credits      BigInt      @default(300)
  meta         String?
  GamerStat    GamerStat[]
  Post         Post[]
}

enum AssetType {
  Component
  Script
  Page
  Snippet
}

model Assets {
  id        Int       @id @default(autoincrement())
  type      AssetType
  uid       String    @unique
  content   String
  title     String
  indexed   Boolean   @default(false)
  Indexer   Indexer?  @relation(fields: [indexerId], references: [id])
  indexerId Int?
}

model Admin {
  id         BigInt    @id @default(autoincrement())
  role       String
  login      String    @unique
  password   String
  token      String
  activities String?
  connection DateTime?
}
