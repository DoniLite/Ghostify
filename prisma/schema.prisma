generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id      Int     @id @default(autoincrement())
  email   String  @unique
  name    String?
  message String?
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  fullname      String?
  password      String?
  token         String?
  service       String?
  registration  DateTime?
  permission    Permission
  apiAccess     Boolean         @default(false)
  apiCredits    Int             @default(300)
  cvCredits     Int             @default(300)
  posterCredits Int             @default(300)
  provider      Provider?
  username      String?         @unique
  file          String?
  providerId    String?         @unique
  registered    Boolean         @default(false)
  plan          UserPlan        @default(Free)
  bio           String?
  link          String?
  Key           Key[]
  notifications Notifications[]
  CV            Resume[]
  Document      Document[]
}

model Key {
  id     Int     @id @default(autoincrement())
  key    String?
  iv     String?
  type   KeyType
  uid    String? @unique
  token  String?
  userId Int?
  user   User?   @relation(fields: [userId], references: [id])
}

model Admin {
  id         Int       @id @default(autoincrement())
  role       String
  login      String    @unique
  password   String
  token      String
  activities String?
  connection DateTime?
}

model Notifications {
  id        Int              @id @default(autoincrement())
  title     String?
  type      NotificationType
  content   String
  createdAt DateTime         @default(now())
  seen      Boolean          @default(false)
  userId    Int?
  User      User?            @relation(fields: [userId], references: [id])
}

model Document {
  id           Int      @id @default(autoincrement())
  uid          String   @unique @default(uuid())
  title        String?
  type         String
  downloadLink String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       Int?
  User         User?    @relation(fields: [userId], references: [id])
  postId       Int?
}

model Resume {
  id         Int      @id @default(autoincrement())
  uid        String?  @unique
  url        String?
  type       String?
  mode       String?
  pdf        String?
  screenshot String?
  metaData   String
  img        String?
  default    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int?
}

enum UserPlan {
  Starter
  Pro
  Free
}

enum Service {
  Poster
  CVMaker
  APIs
}

enum Permission {
  User
  Admin
  Root
}

enum Provider {
  Google
  Facebook
  Twitter
  Instagram
  LinkedIn
  Platform
}

enum KeyType {
  Password
  SecretKey
  SessionKey
  ApiKey
  AccessToken
  RefreshToken
  TwoFactorCode
  GoogleAuthCode
  AppleAuthCode
  GitHubAuthCode
  DiscordAuthCode
  TwitterAuthCode
  InstagramAuthCode
  LinkedInAuthCode
  FacebookAuthCode
  RedditAuthCode
  PlatformKey
}

enum NotificationType {
  Alert
  Reply
  like
  Post
  Info
  Message
}
